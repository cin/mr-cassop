// Code generated by MockGen. DO NOT EDIT.
// Source: ./controllers/icarus/icarus.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	icarus "github.com/cin/mr-cassop/controllers/icarus"
	gomock "github.com/golang/mock/gomock"
)

// MockIcarus is a mock of Icarus interface.
type MockIcarus struct {
	ctrl     *gomock.Controller
	recorder *MockIcarusMockRecorder
}

// MockIcarusMockRecorder is the mock recorder for MockIcarus.
type MockIcarusMockRecorder struct {
	mock *MockIcarus
}

// NewMockIcarus creates a new mock instance.
func NewMockIcarus(ctrl *gomock.Controller) *MockIcarus {
	mock := &MockIcarus{ctrl: ctrl}
	mock.recorder = &MockIcarusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIcarus) EXPECT() *MockIcarusMockRecorder {
	return m.recorder
}

// Backup mocks base method.
func (m *MockIcarus) Backup(ctx context.Context, req icarus.BackupRequest) (icarus.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backup", ctx, req)
	ret0, _ := ret[0].(icarus.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Backup indicates an expected call of Backup.
func (mr *MockIcarusMockRecorder) Backup(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backup", reflect.TypeOf((*MockIcarus)(nil).Backup), ctx, req)
}

// Backups mocks base method.
func (m *MockIcarus) Backups(ctx context.Context) ([]icarus.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backups", ctx)
	ret0, _ := ret[0].([]icarus.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Backups indicates an expected call of Backups.
func (mr *MockIcarusMockRecorder) Backups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backups", reflect.TypeOf((*MockIcarus)(nil).Backups), ctx)
}

// Restore mocks base method.
func (m *MockIcarus) Restore(ctx context.Context, req icarus.RestoreRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockIcarusMockRecorder) Restore(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockIcarus)(nil).Restore), ctx, req)
}

// Restores mocks base method.
func (m *MockIcarus) Restores(ctx context.Context) ([]icarus.Restore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restores", ctx)
	ret0, _ := ret[0].([]icarus.Restore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restores indicates an expected call of Restores.
func (mr *MockIcarusMockRecorder) Restores(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restores", reflect.TypeOf((*MockIcarus)(nil).Restores), ctx)
}
